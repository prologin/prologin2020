// SPDX-License-Identifier: GPL-2.0-or-later
// Copyright (c) 2020 Association Prologin <association@prologin.org>

// This file contains the code to call the API functions from the C language.
// This file was generated by stechec2-generator. DO NOT EDIT.

#include <string>
#include <vector>

extern "C"
{
#include "api.h"
}

template <typename CType, typename CxxType>
CxxType c_to_cxx(CType in)
{
    return in;
}

template <>
std::string c_to_cxx<char*, std::string>(char* in)
{
    return in;
}

template <typename CType, typename CType_array, typename CxxType>
std::vector<CxxType> c_to_cxx_array(CType_array in)
{
    std::vector<CxxType> out(in.length);
    for (size_t i = 0; i < in.length; ++i)
        out[i] = c_to_cxx<CType, CxxType>(in.items[i]);
    return out;
}

template <typename CType, typename CxxType>
CType cxx_to_c(CxxType in)
{
    return in;
}

template <>
char* cxx_to_c<char*, std::string>(std::string in)
{
    size_t l = in.length();
    char* out = (char *) malloc(l + 1);
    for (size_t i = 0; i < l; i++)
        out[i] = in[i];
    out[l] = 0;
    return out;
}

template <typename CType, typename CType_array, typename CxxType>
CType_array cxx_to_c_array(const std::vector<CxxType>& in)
{
    CType_array out = {NULL, in.size()};
    out.items = (CType*)malloc((out.length) * sizeof(CType));
    for (size_t i = 0; i < out.length; ++i)
        out.items[i] = cxx_to_c<CType, CxxType>(in[i]);
    return out;
}

/// Position dans le jardin, donnée par deux coordonnées.

typedef struct __internal__cxx__position
{
    int x; ///< Coordonnée : x
    int y; ///< Coordonnée : y
} __internal__cxx__position;

template <>
__internal__cxx__position c_to_cxx<position, __internal__cxx__position>(position in)
{
    __internal__cxx__position out;
    out.x = c_to_cxx<int, int>(in.x);
    out.y = c_to_cxx<int, int>(in.y);
    return out;
}

template <>
position cxx_to_c<position, __internal__cxx__position>(__internal__cxx__position in)
{
    position out;
    out.x = cxx_to_c<int, int>(in.x);
    out.y = cxx_to_c<int, int>(in.y);
    return out;
}

/// Une plante

typedef struct __internal__cxx__plante
{
    __internal__cxx__position pos; ///< Position de la plante
    int jardinier; ///< Jardinier ayant planté la plante
    bool adulte; ///< La plante est adulte
    bool enracinee; ///< La plante a déjà déjà été dépotée
    int vie; ///< Point(s) de vie restant(s) de la plante
    int vie_max; ///< Point(s) de vie maximumde la plante
    int force; ///< Force de la baffe de la plante
    int elegance; ///< Élégance de la plante
    int rayon_deplacement; ///< Distance maximale parcourable par la plante en creusant
    int rayon_collecte; ///< Rayon de collecte des ressources pour la plante
    std::vector<int> consommation; ///< Quantité de ressources consommées par la plante
    int age; ///< Âge de la plante
} __internal__cxx__plante;

template <>
__internal__cxx__plante c_to_cxx<plante, __internal__cxx__plante>(plante in)
{
    __internal__cxx__plante out;
    out.pos = c_to_cxx<position, __internal__cxx__position>(in.pos);
    out.jardinier = c_to_cxx<int, int>(in.jardinier);
    out.adulte = c_to_cxx<bool, bool>(in.adulte);
    out.enracinee = c_to_cxx<bool, bool>(in.enracinee);
    out.vie = c_to_cxx<int, int>(in.vie);
    out.vie_max = c_to_cxx<int, int>(in.vie_max);
    out.force = c_to_cxx<int, int>(in.force);
    out.elegance = c_to_cxx<int, int>(in.elegance);
    out.rayon_deplacement = c_to_cxx<int, int>(in.rayon_deplacement);
    out.rayon_collecte = c_to_cxx<int, int>(in.rayon_collecte);
    out.consommation = c_to_cxx_array<int, int_array, int>(in.consommation);
    out.age = c_to_cxx<int, int>(in.age);
    return out;
}

template <>
plante cxx_to_c<plante, __internal__cxx__plante>(__internal__cxx__plante in)
{
    plante out;
    out.pos = cxx_to_c<position, __internal__cxx__position>(in.pos);
    out.jardinier = cxx_to_c<int, int>(in.jardinier);
    out.adulte = cxx_to_c<bool, bool>(in.adulte);
    out.enracinee = cxx_to_c<bool, bool>(in.enracinee);
    out.vie = cxx_to_c<int, int>(in.vie);
    out.vie_max = cxx_to_c<int, int>(in.vie_max);
    out.force = cxx_to_c<int, int>(in.force);
    out.elegance = cxx_to_c<int, int>(in.elegance);
    out.rayon_deplacement = cxx_to_c<int, int>(in.rayon_deplacement);
    out.rayon_collecte = cxx_to_c<int, int>(in.rayon_collecte);
    out.consommation = cxx_to_c_array<int, int_array, int>(in.consommation);
    out.age = cxx_to_c<int, int>(in.age);
    return out;
}

/// Représentation d'une action dans l'historique

typedef struct __internal__cxx__action_hist
{
    action_type atype; ///< Type de l'action
    __internal__cxx__position position_baffante; ///< Position de la plante baffante (si type d'action ``action_baffer``)
    __internal__cxx__position position_baffee; ///< Position de la plante baffée (si type d'action ``action_baffer``)
    __internal__cxx__position position_depart; ///< Position de la plante à déplacer (si type d'action ``action_depoter``)
    __internal__cxx__position position_arrivee; ///< Position où déplacer la plante (si type d'action ``action_depoter``)
    __internal__cxx__position position_plante; ///< Position de la plante  (si type d'action ``action_arroser``)
    caracteristique amelioration; ///< Caractéristique à améliorer (si type d'action ``action_arroser``)
} __internal__cxx__action_hist;

template <>
__internal__cxx__action_hist c_to_cxx<action_hist, __internal__cxx__action_hist>(action_hist in)
{
    __internal__cxx__action_hist out;
    out.atype = c_to_cxx<action_type, action_type>(in.atype);
    out.position_baffante = c_to_cxx<position, __internal__cxx__position>(in.position_baffante);
    out.position_baffee = c_to_cxx<position, __internal__cxx__position>(in.position_baffee);
    out.position_depart = c_to_cxx<position, __internal__cxx__position>(in.position_depart);
    out.position_arrivee = c_to_cxx<position, __internal__cxx__position>(in.position_arrivee);
    out.position_plante = c_to_cxx<position, __internal__cxx__position>(in.position_plante);
    out.amelioration = c_to_cxx<caracteristique, caracteristique>(in.amelioration);
    return out;
}

template <>
action_hist cxx_to_c<action_hist, __internal__cxx__action_hist>(__internal__cxx__action_hist in)
{
    action_hist out;
    out.atype = cxx_to_c<action_type, action_type>(in.atype);
    out.position_baffante = cxx_to_c<position, __internal__cxx__position>(in.position_baffante);
    out.position_baffee = cxx_to_c<position, __internal__cxx__position>(in.position_baffee);
    out.position_depart = cxx_to_c<position, __internal__cxx__position>(in.position_depart);
    out.position_arrivee = cxx_to_c<position, __internal__cxx__position>(in.position_arrivee);
    out.position_plante = cxx_to_c<position, __internal__cxx__position>(in.position_plante);
    out.amelioration = cxx_to_c<caracteristique, caracteristique>(in.amelioration);
    return out;
}


extern "C" erreur api_depoter(__internal__cxx__position position_depart, __internal__cxx__position position_arrivee);

extern "C" erreur depoter(position position_depart, position position_arrivee)
{
    return cxx_to_c<erreur, erreur>(api_depoter(c_to_cxx<position, __internal__cxx__position>(position_depart), c_to_cxx<position, __internal__cxx__position>(position_arrivee)));
}

extern "C" erreur api_arroser(__internal__cxx__position position_plante, caracteristique amelioration);

extern "C" erreur arroser(position position_plante, caracteristique amelioration)
{
    return cxx_to_c<erreur, erreur>(api_arroser(c_to_cxx<position, __internal__cxx__position>(position_plante), c_to_cxx<caracteristique, caracteristique>(amelioration)));
}

extern "C" erreur api_baffer(__internal__cxx__position position_baffante, __internal__cxx__position position_baffee);

extern "C" erreur baffer(position position_baffante, position position_baffee)
{
    return cxx_to_c<erreur, erreur>(api_baffer(c_to_cxx<position, __internal__cxx__position>(position_baffante), c_to_cxx<position, __internal__cxx__position>(position_baffee)));
}

extern "C" erreur api_debug_afficher_chien(__internal__cxx__position pos, debug_chien chien);

extern "C" erreur debug_afficher_chien(position pos, debug_chien chien)
{
    return cxx_to_c<erreur, erreur>(api_debug_afficher_chien(c_to_cxx<position, __internal__cxx__position>(pos), c_to_cxx<debug_chien, debug_chien>(chien)));
}

extern "C" std::vector<__internal__cxx__plante> api_plantes_jardinier(int jardinier);

extern "C" plante_array plantes_jardinier(int jardinier)
{
    return cxx_to_c_array<plante, plante_array, __internal__cxx__plante>(api_plantes_jardinier(c_to_cxx<int, int>(jardinier)));
}

extern "C" __internal__cxx__plante api_plante_sur_case(__internal__cxx__position pos);

extern "C" plante plante_sur_case(position pos)
{
    return cxx_to_c<plante, __internal__cxx__plante>(api_plante_sur_case(c_to_cxx<position, __internal__cxx__position>(pos)));
}

extern "C" std::vector<__internal__cxx__plante> api_plantes_arrosables(int jardinier);

extern "C" plante_array plantes_arrosables(int jardinier)
{
    return cxx_to_c_array<plante, plante_array, __internal__cxx__plante>(api_plantes_arrosables(c_to_cxx<int, int>(jardinier)));
}

extern "C" std::vector<__internal__cxx__plante> api_plantes_adultes(int jardinier);

extern "C" plante_array plantes_adultes(int jardinier)
{
    return cxx_to_c_array<plante, plante_array, __internal__cxx__plante>(api_plantes_adultes(c_to_cxx<int, int>(jardinier)));
}

extern "C" std::vector<__internal__cxx__plante> api_plantes_depotables(int jardinier);

extern "C" plante_array plantes_depotables(int jardinier)
{
    return cxx_to_c_array<plante, plante_array, __internal__cxx__plante>(api_plantes_depotables(c_to_cxx<int, int>(jardinier)));
}

extern "C" std::vector<int> api_ressources_sur_case(__internal__cxx__position pos);

extern "C" int_array ressources_sur_case(position pos)
{
    return cxx_to_c_array<int, int_array, int>(api_ressources_sur_case(c_to_cxx<position, __internal__cxx__position>(pos)));
}

extern "C" bool api_reproduction_possible(__internal__cxx__position pos, int rayon_collecte, std::vector<int> consommation);

extern "C" bool reproduction_possible(position pos, int rayon_collecte, int_array consommation)
{
    return cxx_to_c<bool, bool>(api_reproduction_possible(c_to_cxx<position, __internal__cxx__position>(pos), c_to_cxx<int, int>(rayon_collecte), c_to_cxx_array<int, int_array, int>(consommation)));
}

extern "C" bool api_plante_reproductible(__internal__cxx__position pos);

extern "C" bool plante_reproductible(position pos)
{
    return cxx_to_c<bool, bool>(api_plante_reproductible(c_to_cxx<position, __internal__cxx__position>(pos)));
}

extern "C" __internal__cxx__plante api_croisement(std::vector<__internal__cxx__plante> parents);

extern "C" plante croisement(plante_array parents)
{
    return cxx_to_c<plante, __internal__cxx__plante>(api_croisement(c_to_cxx_array<plante, plante_array, __internal__cxx__plante>(parents)));
}

extern "C" std::vector<__internal__cxx__action_hist> api_historique();

extern "C" action_hist_array historique(void)
{
    return cxx_to_c_array<action_hist, action_hist_array, __internal__cxx__action_hist>(api_historique());
}

extern "C" int api_score(int id_jardinier);

extern "C" int score(int id_jardinier)
{
    return cxx_to_c<int, int>(api_score(c_to_cxx<int, int>(id_jardinier)));
}

extern "C" int api_moi();

extern "C" int moi(void)
{
    return cxx_to_c<int, int>(api_moi());
}

extern "C" int api_adversaire();

extern "C" int adversaire(void)
{
    return cxx_to_c<int, int>(api_adversaire());
}

extern "C" bool api_annuler();

extern "C" bool annuler(void)
{
    return cxx_to_c<bool, bool>(api_annuler());
}

extern "C" int api_tour_actuel();

extern "C" int tour_actuel(void)
{
    return cxx_to_c<int, int>(api_tour_actuel());
}

extern "C" void api_afficher_erreur(erreur v);

extern "C" void afficher_erreur(erreur v)
{
api_afficher_erreur(c_to_cxx<erreur, erreur>(v));
}

extern "C" void api_afficher_action_type(action_type v);

extern "C" void afficher_action_type(action_type v)
{
api_afficher_action_type(c_to_cxx<action_type, action_type>(v));
}

extern "C" void api_afficher_caracteristique(caracteristique v);

extern "C" void afficher_caracteristique(caracteristique v)
{
api_afficher_caracteristique(c_to_cxx<caracteristique, caracteristique>(v));
}

extern "C" void api_afficher_debug_chien(debug_chien v);

extern "C" void afficher_debug_chien(debug_chien v)
{
api_afficher_debug_chien(c_to_cxx<debug_chien, debug_chien>(v));
}

extern "C" void api_afficher_position(__internal__cxx__position v);

extern "C" void afficher_position(position v)
{
api_afficher_position(c_to_cxx<position, __internal__cxx__position>(v));
}

extern "C" void api_afficher_plante(__internal__cxx__plante v);

extern "C" void afficher_plante(plante v)
{
api_afficher_plante(c_to_cxx<plante, __internal__cxx__plante>(v));
}

extern "C" void api_afficher_action_hist(__internal__cxx__action_hist v);

extern "C" void afficher_action_hist(action_hist v)
{
api_afficher_action_hist(c_to_cxx<action_hist, __internal__cxx__action_hist>(v));
}
